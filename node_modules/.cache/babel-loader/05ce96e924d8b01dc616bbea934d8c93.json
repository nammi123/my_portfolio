{"ast":null,"code":"import _classCallCheck from \"C:/Users/om/OneDrive/Desktop/My_PortFolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/om/OneDrive/Desktop/My_PortFolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { noopReturn, defaults, isEasingGenerator, isEasingList, interpolate } from '@motionone/utils';\nimport { getEasingFunction } from './utils/easing.es.js';\n\nvar Animation = /*#__PURE__*/function () {\n  function Animation(output) {\n    var _this = this;\n\n    var keyframes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 1];\n\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        easing = _ref.easing,\n        _ref$duration = _ref.duration,\n        initialDuration = _ref$duration === void 0 ? defaults.duration : _ref$duration,\n        _ref$delay = _ref.delay,\n        delay = _ref$delay === void 0 ? defaults.delay : _ref$delay,\n        _ref$endDelay = _ref.endDelay,\n        endDelay = _ref$endDelay === void 0 ? defaults.endDelay : _ref$endDelay,\n        _ref$repeat = _ref.repeat,\n        repeat = _ref$repeat === void 0 ? defaults.repeat : _ref$repeat,\n        offset = _ref.offset,\n        _ref$direction = _ref.direction,\n        direction = _ref$direction === void 0 ? \"normal\" : _ref$direction;\n\n    _classCallCheck(this, Animation);\n\n    this.startTime = null;\n    this.rate = 1;\n    this.t = 0;\n    this.cancelTimestamp = null;\n    this.easing = noopReturn;\n    this.duration = 0;\n    this.totalDuration = 0;\n    this.repeat = 0;\n    this.playState = \"idle\";\n    this.finished = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    easing = easing || defaults.easing;\n\n    if (isEasingGenerator(easing)) {\n      var custom = easing.createAnimation(keyframes, function () {\n        return \"0\";\n      }, true);\n      easing = custom.easing;\n      if (custom.keyframes !== undefined) keyframes = custom.keyframes;\n      if (custom.duration !== undefined) initialDuration = custom.duration;\n    }\n\n    this.repeat = repeat;\n    this.easing = isEasingList(easing) ? noopReturn : getEasingFunction(easing);\n    this.updateDuration(initialDuration);\n    var interpolate$1 = interpolate(keyframes, offset, isEasingList(easing) ? easing.map(getEasingFunction) : noopReturn);\n\n    this.tick = function (timestamp) {\n      var _a; // TODO: Temporary fix for OptionsResolver typing\n\n\n      delay = delay;\n      var t = 0;\n\n      if (_this.pauseTime !== undefined) {\n        t = _this.pauseTime;\n      } else {\n        t = (timestamp - _this.startTime) * _this.rate;\n      }\n\n      _this.t = t; // Convert to seconds\n\n      t /= 1000; // Rebase on delay\n\n      t = Math.max(t - delay, 0);\n      /**\r\n       * If this animation has finished, set the current time\r\n       * to the total duration.\r\n       */\n\n      if (_this.playState === \"finished\" && _this.pauseTime === undefined) {\n        t = _this.totalDuration;\n      }\n      /**\r\n       * Get the current progress (0-1) of the animation. If t is >\r\n       * than duration we'll get values like 2.5 (midway through the\r\n       * third iteration)\r\n       */\n\n\n      var progress = t / _this.duration; // TODO progress += iterationStart\n\n      /**\r\n       * Get the current iteration (0 indexed). For instance the floor of\r\n       * 2.5 is 2.\r\n       */\n\n      var currentIteration = Math.floor(progress);\n      /**\r\n       * Get the current progress of the iteration by taking the remainder\r\n       * so 2.5 is 0.5 through iteration 2\r\n       */\n\n      var iterationProgress = progress % 1.0;\n\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n      /**\r\n       * If iteration progress is 1 we count that as the end\r\n       * of the previous iteration.\r\n       */\n\n\n      iterationProgress === 1 && currentIteration--;\n      /**\r\n       * Reverse progress if we're not running in \"normal\" direction\r\n       */\n\n      var iterationIsOdd = currentIteration % 2;\n\n      if (direction === \"reverse\" || direction === \"alternate\" && iterationIsOdd || direction === \"alternate-reverse\" && !iterationIsOdd) {\n        iterationProgress = 1 - iterationProgress;\n      }\n\n      var p = t >= _this.totalDuration ? 1 : Math.min(iterationProgress, 1);\n      var latest = interpolate$1(_this.easing(p));\n      output(latest);\n      var isAnimationFinished = _this.pauseTime === undefined && (_this.playState === \"finished\" || t >= _this.totalDuration + endDelay);\n\n      if (isAnimationFinished) {\n        _this.playState = \"finished\";\n        (_a = _this.resolve) === null || _a === void 0 ? void 0 : _a.call(_this, latest);\n      } else if (_this.playState !== \"idle\") {\n        _this.frameRequestId = requestAnimationFrame(_this.tick);\n      }\n    };\n\n    this.play();\n  }\n\n  _createClass(Animation, [{\n    key: \"play\",\n    value: function play() {\n      var now = performance.now();\n      this.playState = \"running\";\n\n      if (this.pauseTime !== undefined) {\n        this.startTime = now - this.pauseTime;\n      } else if (!this.startTime) {\n        this.startTime = now;\n      }\n\n      this.cancelTimestamp = this.startTime;\n      this.pauseTime = undefined;\n      this.frameRequestId = requestAnimationFrame(this.tick);\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.playState = \"paused\";\n      this.pauseTime = this.t;\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this.playState = \"finished\";\n      this.tick(0);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _a;\n\n      this.playState = \"idle\";\n\n      if (this.frameRequestId !== undefined) {\n        cancelAnimationFrame(this.frameRequestId);\n      }\n\n      (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, false);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.stop();\n      this.tick(this.cancelTimestamp);\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse() {\n      this.rate *= -1;\n    }\n  }, {\n    key: \"commitStyles\",\n    value: function commitStyles() {}\n  }, {\n    key: \"updateDuration\",\n    value: function updateDuration(duration) {\n      this.duration = duration;\n      this.totalDuration = duration * (this.repeat + 1);\n    }\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      return this.t;\n    },\n    set: function set(t) {\n      if (this.pauseTime !== undefined || this.rate === 0) {\n        this.pauseTime = t;\n      } else {\n        this.startTime = performance.now() - t / this.rate;\n      }\n    }\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this.rate;\n    },\n    set: function set(rate) {\n      this.rate = rate;\n    }\n  }]);\n\n  return Animation;\n}();\n\nexport { Animation };","map":{"version":3,"sources":["C:/Users/om/OneDrive/Desktop/My_PortFolio/node_modules/@motionone/animation/dist/Animation.es.js"],"names":["noopReturn","defaults","isEasingGenerator","isEasingList","interpolate","getEasingFunction","Animation","output","keyframes","easing","duration","initialDuration","delay","endDelay","repeat","offset","direction","startTime","rate","t","cancelTimestamp","totalDuration","playState","finished","Promise","resolve","reject","custom","createAnimation","undefined","updateDuration","interpolate$1","map","tick","timestamp","_a","pauseTime","Math","max","progress","currentIteration","floor","iterationProgress","iterationIsOdd","p","min","latest","isAnimationFinished","call","frameRequestId","requestAnimationFrame","play","now","performance","cancelAnimationFrame","stop"],"mappings":"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","sourcesContent":["import { noopReturn, defaults, isEasingGenerator, isEasingList, interpolate } from '@motionone/utils';\r\nimport { getEasingFunction } from './utils/easing.es.js';\r\n\r\nclass Animation {\r\n    constructor(output, keyframes = [0, 1], { easing, duration: initialDuration = defaults.duration, delay = defaults.delay, endDelay = defaults.endDelay, repeat = defaults.repeat, offset, direction = \"normal\", } = {}) {\r\n        this.startTime = null;\r\n        this.rate = 1;\r\n        this.t = 0;\r\n        this.cancelTimestamp = null;\r\n        this.easing = noopReturn;\r\n        this.duration = 0;\r\n        this.totalDuration = 0;\r\n        this.repeat = 0;\r\n        this.playState = \"idle\";\r\n        this.finished = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n        easing = easing || defaults.easing;\r\n        if (isEasingGenerator(easing)) {\r\n            const custom = easing.createAnimation(keyframes, () => \"0\", true);\r\n            easing = custom.easing;\r\n            if (custom.keyframes !== undefined)\r\n                keyframes = custom.keyframes;\r\n            if (custom.duration !== undefined)\r\n                initialDuration = custom.duration;\r\n        }\r\n        this.repeat = repeat;\r\n        this.easing = isEasingList(easing) ? noopReturn : getEasingFunction(easing);\r\n        this.updateDuration(initialDuration);\r\n        const interpolate$1 = interpolate(keyframes, offset, isEasingList(easing) ? easing.map(getEasingFunction) : noopReturn);\r\n        this.tick = (timestamp) => {\r\n            var _a;\r\n            // TODO: Temporary fix for OptionsResolver typing\r\n            delay = delay;\r\n            let t = 0;\r\n            if (this.pauseTime !== undefined) {\r\n                t = this.pauseTime;\r\n            }\r\n            else {\r\n                t = (timestamp - this.startTime) * this.rate;\r\n            }\r\n            this.t = t;\r\n            // Convert to seconds\r\n            t /= 1000;\r\n            // Rebase on delay\r\n            t = Math.max(t - delay, 0);\r\n            /**\r\n             * If this animation has finished, set the current time\r\n             * to the total duration.\r\n             */\r\n            if (this.playState === \"finished\" && this.pauseTime === undefined) {\r\n                t = this.totalDuration;\r\n            }\r\n            /**\r\n             * Get the current progress (0-1) of the animation. If t is >\r\n             * than duration we'll get values like 2.5 (midway through the\r\n             * third iteration)\r\n             */\r\n            const progress = t / this.duration;\r\n            // TODO progress += iterationStart\r\n            /**\r\n             * Get the current iteration (0 indexed). For instance the floor of\r\n             * 2.5 is 2.\r\n             */\r\n            let currentIteration = Math.floor(progress);\r\n            /**\r\n             * Get the current progress of the iteration by taking the remainder\r\n             * so 2.5 is 0.5 through iteration 2\r\n             */\r\n            let iterationProgress = progress % 1.0;\r\n            if (!iterationProgress && progress >= 1) {\r\n                iterationProgress = 1;\r\n            }\r\n            /**\r\n             * If iteration progress is 1 we count that as the end\r\n             * of the previous iteration.\r\n             */\r\n            iterationProgress === 1 && currentIteration--;\r\n            /**\r\n             * Reverse progress if we're not running in \"normal\" direction\r\n             */\r\n            const iterationIsOdd = currentIteration % 2;\r\n            if (direction === \"reverse\" ||\r\n                (direction === \"alternate\" && iterationIsOdd) ||\r\n                (direction === \"alternate-reverse\" && !iterationIsOdd)) {\r\n                iterationProgress = 1 - iterationProgress;\r\n            }\r\n            const p = t >= this.totalDuration ? 1 : Math.min(iterationProgress, 1);\r\n            const latest = interpolate$1(this.easing(p));\r\n            output(latest);\r\n            const isAnimationFinished = this.pauseTime === undefined &&\r\n                (this.playState === \"finished\" || t >= this.totalDuration + endDelay);\r\n            if (isAnimationFinished) {\r\n                this.playState = \"finished\";\r\n                (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, latest);\r\n            }\r\n            else if (this.playState !== \"idle\") {\r\n                this.frameRequestId = requestAnimationFrame(this.tick);\r\n            }\r\n        };\r\n        this.play();\r\n    }\r\n    play() {\r\n        const now = performance.now();\r\n        this.playState = \"running\";\r\n        if (this.pauseTime !== undefined) {\r\n            this.startTime = now - this.pauseTime;\r\n        }\r\n        else if (!this.startTime) {\r\n            this.startTime = now;\r\n        }\r\n        this.cancelTimestamp = this.startTime;\r\n        this.pauseTime = undefined;\r\n        this.frameRequestId = requestAnimationFrame(this.tick);\r\n    }\r\n    pause() {\r\n        this.playState = \"paused\";\r\n        this.pauseTime = this.t;\r\n    }\r\n    finish() {\r\n        this.playState = \"finished\";\r\n        this.tick(0);\r\n    }\r\n    stop() {\r\n        var _a;\r\n        this.playState = \"idle\";\r\n        if (this.frameRequestId !== undefined) {\r\n            cancelAnimationFrame(this.frameRequestId);\r\n        }\r\n        (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, false);\r\n    }\r\n    cancel() {\r\n        this.stop();\r\n        this.tick(this.cancelTimestamp);\r\n    }\r\n    reverse() {\r\n        this.rate *= -1;\r\n    }\r\n    commitStyles() { }\r\n    updateDuration(duration) {\r\n        this.duration = duration;\r\n        this.totalDuration = duration * (this.repeat + 1);\r\n    }\r\n    get currentTime() {\r\n        return this.t;\r\n    }\r\n    set currentTime(t) {\r\n        if (this.pauseTime !== undefined || this.rate === 0) {\r\n            this.pauseTime = t;\r\n        }\r\n        else {\r\n            this.startTime = performance.now() - t / this.rate;\r\n        }\r\n    }\r\n    get playbackRate() {\r\n        return this.rate;\r\n    }\r\n    set playbackRate(rate) {\r\n        this.rate = rate;\r\n    }\r\n}\r\n\r\nexport { Animation };\r\n"]},"metadata":{},"sourceType":"module"}