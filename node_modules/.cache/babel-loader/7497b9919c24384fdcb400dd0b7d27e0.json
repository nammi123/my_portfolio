{"ast":null,"code":"import { transformDefinitions } from './transforms.es.js';\n\nvar isCssVar = function isCssVar(name) {\n  return name.startsWith(\"--\");\n};\n\nvar registeredProperties = new Set();\n\nfunction registerCssVariable(name) {\n  if (registeredProperties.has(name)) return;\n  registeredProperties.add(name);\n\n  try {\n    var _ref = transformDefinitions.has(name) ? transformDefinitions.get(name) : {},\n        syntax = _ref.syntax,\n        initialValue = _ref.initialValue;\n\n    CSS.registerProperty({\n      name: name,\n      inherits: false,\n      syntax: syntax,\n      initialValue: initialValue\n    });\n  } catch (e) {}\n}\n\nexport { isCssVar, registerCssVariable, registeredProperties };","map":{"version":3,"sources":["C:/Users/om/OneDrive/Desktop/My_PortFolio/node_modules/@motionone/dom/dist/animate/utils/css-var.es.js"],"names":["transformDefinitions","isCssVar","name","startsWith","registeredProperties","Set","registerCssVariable","has","add","get","syntax","initialValue","CSS","registerProperty","inherits","e"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,oBAArC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD;AAAA,SAAUA,IAAI,CAACC,UAAL,CAAgB,IAAhB,CAAV;AAAA,CAAjB;;AACA,IAAMC,oBAAoB,GAAG,IAAIC,GAAJ,EAA7B;;AACA,SAASC,mBAAT,CAA6BJ,IAA7B,EAAmC;AAC/B,MAAIE,oBAAoB,CAACG,GAArB,CAAyBL,IAAzB,CAAJ,EACI;AACJE,EAAAA,oBAAoB,CAACI,GAArB,CAAyBN,IAAzB;;AACA,MAAI;AACA,eAAiCF,oBAAoB,CAACO,GAArB,CAAyBL,IAAzB,IAC3BF,oBAAoB,CAACS,GAArB,CAAyBP,IAAzB,CAD2B,GAE3B,EAFN;AAAA,QAAQQ,MAAR,QAAQA,MAAR;AAAA,QAAgBC,YAAhB,QAAgBA,YAAhB;;AAGAC,IAAAA,GAAG,CAACC,gBAAJ,CAAqB;AACjBX,MAAAA,IAAI,EAAJA,IADiB;AAEjBY,MAAAA,QAAQ,EAAE,KAFO;AAGjBJ,MAAAA,MAAM,EAANA,MAHiB;AAIjBC,MAAAA,YAAY,EAAZA;AAJiB,KAArB;AAMH,GAVD,CAWA,OAAOI,CAAP,EAAU,CAAG;AAChB;;AAED,SAASd,QAAT,EAAmBK,mBAAnB,EAAwCF,oBAAxC","sourcesContent":["import { transformDefinitions } from './transforms.es.js';\r\n\r\nconst isCssVar = (name) => name.startsWith(\"--\");\r\nconst registeredProperties = new Set();\r\nfunction registerCssVariable(name) {\r\n    if (registeredProperties.has(name))\r\n        return;\r\n    registeredProperties.add(name);\r\n    try {\r\n        const { syntax, initialValue } = transformDefinitions.has(name)\r\n            ? transformDefinitions.get(name)\r\n            : {};\r\n        CSS.registerProperty({\r\n            name,\r\n            inherits: false,\r\n            syntax,\r\n            initialValue,\r\n        });\r\n    }\r\n    catch (e) { }\r\n}\r\n\r\nexport { isCssVar, registerCssVariable, registeredProperties };\r\n"]},"metadata":{},"sourceType":"module"}