{"ast":null,"code":"import { noopReturn, addUniqueItem } from '@motionone/utils';\nimport { getAnimationData } from '../data.es.js';\n/**\r\n * A list of all transformable axes. We'll use this list to generated a version\r\n * of each axes for each transform.\r\n */\n\nvar axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\r\n * An ordered array of each transformable value. By default, transform values\r\n * will be sorted to this order.\r\n */\n\nvar order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nvar transformAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\"\n};\nvar rotation = {\n  syntax: \"<angle>\",\n  initialValue: \"0deg\",\n  toDefaultUnit: function toDefaultUnit(v) {\n    return v + \"deg\";\n  }\n};\nvar baseTransformProperties = {\n  translate: {\n    syntax: \"<length-percentage>\",\n    initialValue: \"0px\",\n    toDefaultUnit: function toDefaultUnit(v) {\n      return v + \"px\";\n    }\n  },\n  rotate: rotation,\n  scale: {\n    syntax: \"<number>\",\n    initialValue: 1,\n    toDefaultUnit: noopReturn\n  },\n  skew: rotation\n};\nvar transformDefinitions = new Map();\n\nvar asTransformCssVar = function asTransformCssVar(name) {\n  return \"--motion-\".concat(name);\n};\n/**\r\n * Generate a list of every possible transform key\r\n */\n\n\nvar transforms = [\"x\", \"y\", \"z\"];\norder.forEach(function (name) {\n  axes.forEach(function (axis) {\n    transforms.push(name + axis);\n    transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n  });\n});\n/**\r\n * A function to use with Array.sort to sort transform keys by their default order.\r\n */\n\nvar compareTransformOrder = function compareTransformOrder(a, b) {\n  return transforms.indexOf(a) - transforms.indexOf(b);\n};\n/**\r\n * Provide a quick way to check if a string is the name of a transform\r\n */\n\n\nvar transformLookup = new Set(transforms);\n\nvar isTransform = function isTransform(name) {\n  return transformLookup.has(name);\n};\n\nvar addTransformToElement = function addTransformToElement(element, name) {\n  // Map x to translateX etc\n  if (transformAlias[name]) name = transformAlias[name];\n\n  var _getAnimationData = getAnimationData(element),\n      transforms = _getAnimationData.transforms;\n\n  addUniqueItem(transforms, name);\n  /**\r\n   * TODO: An optimisation here could be to cache the transform in element data\r\n   * and only update if this has changed.\r\n   */\n\n  element.style.transform = buildTransformTemplate(transforms);\n};\n\nvar buildTransformTemplate = function buildTransformTemplate(transforms) {\n  return transforms.sort(compareTransformOrder).reduce(transformListToString, \"\").trim();\n};\n\nvar transformListToString = function transformListToString(template, name) {\n  return \"\".concat(template, \" \").concat(name, \"(var(\").concat(asTransformCssVar(name), \"))\");\n};\n\nexport { addTransformToElement, asTransformCssVar, axes, buildTransformTemplate, compareTransformOrder, isTransform, transformAlias, transformDefinitions };","map":{"version":3,"sources":["C:/Users/om/OneDrive/Desktop/My_PortFolio/node_modules/@motionone/dom/dist/animate/utils/transforms.es.js"],"names":["noopReturn","addUniqueItem","getAnimationData","axes","order","transformAlias","x","y","z","rotation","syntax","initialValue","toDefaultUnit","v","baseTransformProperties","translate","rotate","scale","skew","transformDefinitions","Map","asTransformCssVar","name","transforms","forEach","axis","push","set","compareTransformOrder","a","b","indexOf","transformLookup","Set","isTransform","has","addTransformToElement","element","style","transform","buildTransformTemplate","sort","reduce","transformListToString","trim","template"],"mappings":"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","sourcesContent":["import { noopReturn, addUniqueItem } from '@motionone/utils';\r\nimport { getAnimationData } from '../data.es.js';\r\n\r\n/**\r\n * A list of all transformable axes. We'll use this list to generated a version\r\n * of each axes for each transform.\r\n */\r\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\r\n/**\r\n * An ordered array of each transformable value. By default, transform values\r\n * will be sorted to this order.\r\n */\r\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\r\nconst transformAlias = {\r\n    x: \"translateX\",\r\n    y: \"translateY\",\r\n    z: \"translateZ\",\r\n};\r\nconst rotation = {\r\n    syntax: \"<angle>\",\r\n    initialValue: \"0deg\",\r\n    toDefaultUnit: (v) => v + \"deg\",\r\n};\r\nconst baseTransformProperties = {\r\n    translate: {\r\n        syntax: \"<length-percentage>\",\r\n        initialValue: \"0px\",\r\n        toDefaultUnit: (v) => v + \"px\",\r\n    },\r\n    rotate: rotation,\r\n    scale: {\r\n        syntax: \"<number>\",\r\n        initialValue: 1,\r\n        toDefaultUnit: noopReturn,\r\n    },\r\n    skew: rotation,\r\n};\r\nconst transformDefinitions = new Map();\r\nconst asTransformCssVar = (name) => `--motion-${name}`;\r\n/**\r\n * Generate a list of every possible transform key\r\n */\r\nconst transforms = [\"x\", \"y\", \"z\"];\r\norder.forEach((name) => {\r\n    axes.forEach((axis) => {\r\n        transforms.push(name + axis);\r\n        transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\r\n    });\r\n});\r\n/**\r\n * A function to use with Array.sort to sort transform keys by their default order.\r\n */\r\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\r\n/**\r\n * Provide a quick way to check if a string is the name of a transform\r\n */\r\nconst transformLookup = new Set(transforms);\r\nconst isTransform = (name) => transformLookup.has(name);\r\nconst addTransformToElement = (element, name) => {\r\n    // Map x to translateX etc\r\n    if (transformAlias[name])\r\n        name = transformAlias[name];\r\n    const { transforms } = getAnimationData(element);\r\n    addUniqueItem(transforms, name);\r\n    /**\r\n     * TODO: An optimisation here could be to cache the transform in element data\r\n     * and only update if this has changed.\r\n     */\r\n    element.style.transform = buildTransformTemplate(transforms);\r\n};\r\nconst buildTransformTemplate = (transforms) => transforms\r\n    .sort(compareTransformOrder)\r\n    .reduce(transformListToString, \"\")\r\n    .trim();\r\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\r\n\r\nexport { addTransformToElement, asTransformCssVar, axes, buildTransformTemplate, compareTransformOrder, isTransform, transformAlias, transformDefinitions };\r\n"]},"metadata":{},"sourceType":"module"}