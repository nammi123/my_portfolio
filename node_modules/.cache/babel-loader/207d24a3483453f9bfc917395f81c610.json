{"ast":null,"code":"import { cubicBezier, steps } from '@motionone/easing';\nimport { isFunction, noopReturn } from '@motionone/utils';\nconst namedEasings = {\n  ease: cubicBezier(0.25, 0.1, 0.25, 1.0),\n  \"ease-in\": cubicBezier(0.42, 0.0, 1.0, 1.0),\n  \"ease-in-out\": cubicBezier(0.42, 0.0, 0.58, 1.0),\n  \"ease-out\": cubicBezier(0.0, 0.0, 0.58, 1.0)\n};\nconst functionArgsRegex = /\\((.*?)\\)/;\n\nfunction getEasingFunction(definition) {\n  // If already an easing function, return\n  if (isFunction(definition)) return definition; // If an easing curve definition, return bezier function\n\n  if (Array.isArray(definition)) return cubicBezier(...definition); // If we have a predefined easing function, return\n\n  if (namedEasings[definition]) return namedEasings[definition]; // If this is a steps function, attempt to create easing curve\n\n  if (definition.startsWith(\"steps\")) {\n    const args = functionArgsRegex.exec(definition);\n\n    if (args) {\n      const argsArray = args[1].split(\",\");\n      return steps(parseFloat(argsArray[0]), argsArray[1].trim());\n    }\n  }\n\n  return noopReturn;\n}\n\nexport { getEasingFunction };","map":{"version":3,"sources":["C:/Users/om/OneDrive/Desktop/Portfolio/My_PortFolio/node_modules/@motionone/animation/dist/utils/easing.es.js"],"names":["cubicBezier","steps","isFunction","noopReturn","namedEasings","ease","functionArgsRegex","getEasingFunction","definition","Array","isArray","startsWith","args","exec","argsArray","split","parseFloat","trim"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,KAAtB,QAAmC,mBAAnC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,kBAAvC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAEL,WAAW,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,EAAkB,GAAlB,CADA;AAEjB,aAAWA,WAAW,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,CAFL;AAGjB,iBAAeA,WAAW,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,EAAkB,GAAlB,CAHT;AAIjB,cAAYA,WAAW,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAiB,GAAjB;AAJN,CAArB;AAMA,MAAMM,iBAAiB,GAAG,WAA1B;;AACA,SAASC,iBAAT,CAA2BC,UAA3B,EAAuC;AACnC;AACA,MAAIN,UAAU,CAACM,UAAD,CAAd,EACI,OAAOA,UAAP,CAH+B,CAInC;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAJ,EACI,OAAOR,WAAW,CAAC,GAAGQ,UAAJ,CAAlB,CAN+B,CAOnC;;AACA,MAAIJ,YAAY,CAACI,UAAD,CAAhB,EACI,OAAOJ,YAAY,CAACI,UAAD,CAAnB,CAT+B,CAUnC;;AACA,MAAIA,UAAU,CAACG,UAAX,CAAsB,OAAtB,CAAJ,EAAoC;AAChC,UAAMC,IAAI,GAAGN,iBAAiB,CAACO,IAAlB,CAAuBL,UAAvB,CAAb;;AACA,QAAII,IAAJ,EAAU;AACN,YAAME,SAAS,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQG,KAAR,CAAc,GAAd,CAAlB;AACA,aAAOd,KAAK,CAACe,UAAU,CAACF,SAAS,CAAC,CAAD,CAAV,CAAX,EAA2BA,SAAS,CAAC,CAAD,CAAT,CAAaG,IAAb,EAA3B,CAAZ;AACH;AACJ;;AACD,SAAOd,UAAP;AACH;;AAED,SAASI,iBAAT","sourcesContent":["import { cubicBezier, steps } from '@motionone/easing';\r\nimport { isFunction, noopReturn } from '@motionone/utils';\r\n\r\nconst namedEasings = {\r\n    ease: cubicBezier(0.25, 0.1, 0.25, 1.0),\r\n    \"ease-in\": cubicBezier(0.42, 0.0, 1.0, 1.0),\r\n    \"ease-in-out\": cubicBezier(0.42, 0.0, 0.58, 1.0),\r\n    \"ease-out\": cubicBezier(0.0, 0.0, 0.58, 1.0),\r\n};\r\nconst functionArgsRegex = /\\((.*?)\\)/;\r\nfunction getEasingFunction(definition) {\r\n    // If already an easing function, return\r\n    if (isFunction(definition))\r\n        return definition;\r\n    // If an easing curve definition, return bezier function\r\n    if (Array.isArray(definition))\r\n        return cubicBezier(...definition);\r\n    // If we have a predefined easing function, return\r\n    if (namedEasings[definition])\r\n        return namedEasings[definition];\r\n    // If this is a steps function, attempt to create easing curve\r\n    if (definition.startsWith(\"steps\")) {\r\n        const args = functionArgsRegex.exec(definition);\r\n        if (args) {\r\n            const argsArray = args[1].split(\",\");\r\n            return steps(parseFloat(argsArray[0]), argsArray[1].trim());\r\n        }\r\n    }\r\n    return noopReturn;\r\n}\r\n\r\nexport { getEasingFunction };\r\n"]},"metadata":{},"sourceType":"module"}