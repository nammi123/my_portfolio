{"ast":null,"code":"import { isCssVar } from './utils/css-var.es.js';\nimport { getStyleName } from './utils/get-style-name.es.js';\nimport { transformDefinitions } from './utils/transforms.es.js';\nconst style = {\n  get: (element, name) => {\n    name = getStyleName(name);\n    let value = isCssVar(name) ? element.style.getPropertyValue(name) : getComputedStyle(element)[name];\n\n    if (!value && value !== 0) {\n      const definition = transformDefinitions.get(name);\n      if (definition) value = definition.initialValue;\n    }\n\n    return value;\n  },\n  set: (element, name, value) => {\n    name = getStyleName(name);\n\n    if (isCssVar(name)) {\n      element.style.setProperty(name, value);\n    } else {\n      element.style[name] = value;\n    }\n  }\n};\nexport { style };","map":{"version":3,"sources":["C:/Users/om/OneDrive/Desktop/Portfolio website/My_PortFolio/node_modules/@motionone/dom/dist/animate/style.es.js"],"names":["isCssVar","getStyleName","transformDefinitions","style","get","element","name","value","getPropertyValue","getComputedStyle","definition","initialValue","set","setProperty"],"mappings":"AAAA,SAASA,QAAT,QAAyB,uBAAzB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,oBAAT,QAAqC,0BAArC;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,GAAG,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACpBA,IAAAA,IAAI,GAAGL,YAAY,CAACK,IAAD,CAAnB;AACA,QAAIC,KAAK,GAAGP,QAAQ,CAACM,IAAD,CAAR,GACND,OAAO,CAACF,KAAR,CAAcK,gBAAd,CAA+BF,IAA/B,CADM,GAENG,gBAAgB,CAACJ,OAAD,CAAhB,CAA0BC,IAA1B,CAFN;;AAGA,QAAI,CAACC,KAAD,IAAUA,KAAK,KAAK,CAAxB,EAA2B;AACvB,YAAMG,UAAU,GAAGR,oBAAoB,CAACE,GAArB,CAAyBE,IAAzB,CAAnB;AACA,UAAII,UAAJ,EACIH,KAAK,GAAGG,UAAU,CAACC,YAAnB;AACP;;AACD,WAAOJ,KAAP;AACH,GAZS;AAaVK,EAAAA,GAAG,EAAE,CAACP,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,KAA0B;AAC3BD,IAAAA,IAAI,GAAGL,YAAY,CAACK,IAAD,CAAnB;;AACA,QAAIN,QAAQ,CAACM,IAAD,CAAZ,EAAoB;AAChBD,MAAAA,OAAO,CAACF,KAAR,CAAcU,WAAd,CAA0BP,IAA1B,EAAgCC,KAAhC;AACH,KAFD,MAGK;AACDF,MAAAA,OAAO,CAACF,KAAR,CAAcG,IAAd,IAAsBC,KAAtB;AACH;AACJ;AArBS,CAAd;AAwBA,SAASJ,KAAT","sourcesContent":["import { isCssVar } from './utils/css-var.es.js';\r\nimport { getStyleName } from './utils/get-style-name.es.js';\r\nimport { transformDefinitions } from './utils/transforms.es.js';\r\n\r\nconst style = {\r\n    get: (element, name) => {\r\n        name = getStyleName(name);\r\n        let value = isCssVar(name)\r\n            ? element.style.getPropertyValue(name)\r\n            : getComputedStyle(element)[name];\r\n        if (!value && value !== 0) {\r\n            const definition = transformDefinitions.get(name);\r\n            if (definition)\r\n                value = definition.initialValue;\r\n        }\r\n        return value;\r\n    },\r\n    set: (element, name, value) => {\r\n        name = getStyleName(name);\r\n        if (isCssVar(name)) {\r\n            element.style.setProperty(name, value);\r\n        }\r\n        else {\r\n            element.style[name] = value;\r\n        }\r\n    },\r\n};\r\n\r\nexport { style };\r\n"]},"metadata":{},"sourceType":"module"}