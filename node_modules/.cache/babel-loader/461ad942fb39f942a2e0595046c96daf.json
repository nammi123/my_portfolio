{"ast":null,"code":"import { noopReturn } from '@motionone/utils';\nimport { updateScrollInfo } from './info.es.js';\nimport { resolveOffsets } from './offsets/index.es.js';\n\nfunction _measure(container) {\n  var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : container;\n  var info = arguments.length > 2 ? arguments[2] : undefined;\n\n  /**\r\n   * Find inset of target within scrollable container\r\n   */\n  info.x.targetOffset = 0;\n  info.y.targetOffset = 0;\n\n  if (target !== container) {\n    var node = target;\n\n    while (node && node != container) {\n      info.x.targetOffset += node.offsetLeft;\n      info.y.targetOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n  }\n\n  info.x.targetLength = target === container ? target.scrollWidth : target.clientWidth;\n  info.y.targetLength = target === container ? target.scrollHeight : target.clientHeight;\n  info.x.containerLength = container.clientWidth;\n  info.y.containerLength = container.clientHeight;\n}\n\nfunction createOnScrollHandler(element, onScroll, info) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var axis = options.axis || \"y\";\n  return {\n    measure: function measure() {\n      return _measure(element, options.target, info);\n    },\n    update: function update(time) {\n      updateScrollInfo(element, info, time);\n\n      if (options.offset || options.target) {\n        resolveOffsets(element, info, options);\n      }\n    },\n    notify: typeof onScroll === \"function\" ? function () {\n      return onScroll(info);\n    } : scrubAnimation(onScroll, info[axis])\n  };\n}\n\nfunction scrubAnimation(controls, axisInfo) {\n  controls.pause();\n  controls.forEachNative(function (animation, _ref) {\n    var easing = _ref.easing;\n\n    var _a, _b;\n\n    if (animation.updateDuration) {\n      if (!easing) animation.easing = noopReturn;\n      animation.updateDuration(1);\n    } else {\n      var timingOptions = {\n        duration: 1000\n      };\n      if (!easing) timingOptions.easing = \"linear\";\n      (_b = (_a = animation.effect) === null || _a === void 0 ? void 0 : _a.updateTiming) === null || _b === void 0 ? void 0 : _b.call(_a, timingOptions);\n    }\n  });\n  return function () {\n    controls.currentTime = axisInfo.progress;\n  };\n}\n\nexport { createOnScrollHandler };","map":{"version":3,"sources":["C:/Users/om/OneDrive/Desktop/My_PortFolio/node_modules/@motionone/dom/dist/gestures/scroll/on-scroll-handler.es.js"],"names":["noopReturn","updateScrollInfo","resolveOffsets","measure","container","target","info","x","targetOffset","y","node","offsetLeft","offsetTop","offsetParent","targetLength","scrollWidth","clientWidth","scrollHeight","clientHeight","containerLength","createOnScrollHandler","element","onScroll","options","axis","update","time","offset","notify","scrubAnimation","controls","axisInfo","pause","forEachNative","animation","easing","_a","_b","updateDuration","timingOptions","duration","effect","updateTiming","call","currentTime","progress"],"mappings":"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","sourcesContent":["import { noopReturn } from '@motionone/utils';\r\nimport { updateScrollInfo } from './info.es.js';\r\nimport { resolveOffsets } from './offsets/index.es.js';\r\n\r\nfunction measure(container, target = container, info) {\r\n    /**\r\n     * Find inset of target within scrollable container\r\n     */\r\n    info.x.targetOffset = 0;\r\n    info.y.targetOffset = 0;\r\n    if (target !== container) {\r\n        let node = target;\r\n        while (node && node != container) {\r\n            info.x.targetOffset += node.offsetLeft;\r\n            info.y.targetOffset += node.offsetTop;\r\n            node = node.offsetParent;\r\n        }\r\n    }\r\n    info.x.targetLength =\r\n        target === container ? target.scrollWidth : target.clientWidth;\r\n    info.y.targetLength =\r\n        target === container ? target.scrollHeight : target.clientHeight;\r\n    info.x.containerLength = container.clientWidth;\r\n    info.y.containerLength = container.clientHeight;\r\n}\r\nfunction createOnScrollHandler(element, onScroll, info, options = {}) {\r\n    const axis = options.axis || \"y\";\r\n    return {\r\n        measure: () => measure(element, options.target, info),\r\n        update: (time) => {\r\n            updateScrollInfo(element, info, time);\r\n            if (options.offset || options.target) {\r\n                resolveOffsets(element, info, options);\r\n            }\r\n        },\r\n        notify: typeof onScroll === \"function\"\r\n            ? () => onScroll(info)\r\n            : scrubAnimation(onScroll, info[axis]),\r\n    };\r\n}\r\nfunction scrubAnimation(controls, axisInfo) {\r\n    controls.pause();\r\n    controls.forEachNative((animation, { easing }) => {\r\n        var _a, _b;\r\n        if (animation.updateDuration) {\r\n            if (!easing)\r\n                animation.easing = noopReturn;\r\n            animation.updateDuration(1);\r\n        }\r\n        else {\r\n            const timingOptions = { duration: 1000 };\r\n            if (!easing)\r\n                timingOptions.easing = \"linear\";\r\n            (_b = (_a = animation.effect) === null || _a === void 0 ? void 0 : _a.updateTiming) === null || _b === void 0 ? void 0 : _b.call(_a, timingOptions);\r\n        }\r\n    });\r\n    return () => {\r\n        controls.currentTime = axisInfo.progress;\r\n    };\r\n}\r\n\r\nexport { createOnScrollHandler };\r\n"]},"metadata":{},"sourceType":"module"}