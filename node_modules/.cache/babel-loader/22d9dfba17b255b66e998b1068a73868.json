{"ast":null,"code":"import _defineProperty from \"C:/Users/om/OneDrive/Desktop/My_PortFolio/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { getAnimationData, getMotionValue } from './data.es.js';\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\nimport { Animation } from '@motionone/animation';\nimport { defaults, isEasingGenerator, isNumber, time, isEasingList, noop } from '@motionone/utils';\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\nimport { convertEasing } from './utils/easing.es.js';\nimport { supports } from './utils/feature-detection.es.js';\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\nimport { style } from './style.es.js';\nimport { getStyleName } from './utils/get-style-name.es.js';\nimport { stopAnimation } from './utils/stop-animation.es.js';\n\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\n\nfunction animateStyle(element, key, keyframesDefinition) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var record = getDevToolsRecord();\n  var isRecording = options.record !== false && record;\n  var animation;\n  var _options$duration = options.duration,\n      duration = _options$duration === void 0 ? defaults.duration : _options$duration,\n      _options$delay = options.delay,\n      delay = _options$delay === void 0 ? defaults.delay : _options$delay,\n      _options$endDelay = options.endDelay,\n      endDelay = _options$endDelay === void 0 ? defaults.endDelay : _options$endDelay,\n      _options$repeat = options.repeat,\n      repeat = _options$repeat === void 0 ? defaults.repeat : _options$repeat,\n      _options$easing = options.easing,\n      easing = _options$easing === void 0 ? defaults.easing : _options$easing,\n      direction = options.direction,\n      offset = options.offset,\n      _options$allowWebkitA = options.allowWebkitAcceleration,\n      allowWebkitAcceleration = _options$allowWebkitA === void 0 ? false : _options$allowWebkitA;\n  var data = getAnimationData(element);\n  var canAnimateNatively = supports.waapi();\n  var valueIsTransform = isTransform(key);\n  /**\r\n   * If this is an individual transform, we need to map its\r\n   * key to a CSS variable and update the element's transform style\r\n   */\n\n  valueIsTransform && addTransformToElement(element, key);\n  var name = getStyleName(key);\n  var motionValue = getMotionValue(data.values, name);\n  /**\r\n   * Get definition of value, this will be used to convert numerical\r\n   * keyframes into the default value type.\r\n   */\n\n  var definition = transformDefinitions.get(name);\n  /**\r\n   * Stop the current animation, if any. Because this will trigger\r\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\r\n   * this is fired now and we return a factory function to create\r\n   * the actual animation that can get called in batch,\r\n   */\n\n  stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) && options.record !== false);\n  /**\r\n   * Batchable factory function containing all DOM reads.\r\n   */\n\n  return function () {\n    var readInitialValue = function readInitialValue() {\n      var _a, _b;\n\n      return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\r\n     * Replace null values with the previous keyframe value, or read\r\n     * it from the DOM if it's the first keyframe.\r\n     */\n\n\n    var keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\n\n    if (isEasingGenerator(easing)) {\n      var custom = easing.createAnimation(keyframes, readInitialValue, valueIsTransform, name, motionValue);\n      easing = custom.easing;\n      if (custom.keyframes !== undefined) keyframes = custom.keyframes;\n      if (custom.duration !== undefined) duration = custom.duration;\n    }\n    /**\r\n     * If this is a CSS variable we need to register it with the browser\r\n     * before it can be animated natively. We also set it with setProperty\r\n     * rather than directly onto the element.style object.\r\n     */\n\n\n    if (isCssVar(name)) {\n      if (supports.cssRegisterProperty()) {\n        registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\r\n     * If we can animate this value with WAAPI, do so. Currently this only\r\n     * feature detects CSS.registerProperty but could check WAAPI too.\r\n     */\n\n\n    if (canAnimateNatively) {\n      var _element$animate;\n\n      /**\r\n       * Convert numbers to default value types. Currently this only supports\r\n       * transforms but it could also support other value types.\r\n       */\n      if (definition) {\n        keyframes = keyframes.map(function (value) {\n          return isNumber(value) ? definition.toDefaultUnit(value) : value;\n        });\n      }\n      /**\r\n       * If this browser doesn't support partial/implicit keyframes we need to\r\n       * explicitly provide one.\r\n       */\n\n\n      if (keyframes.length === 1 && (!supports.partialKeyframes() || isRecording)) {\n        keyframes.unshift(readInitialValue());\n      }\n\n      var animationOptions = {\n        delay: time.ms(delay),\n        duration: time.ms(duration),\n        endDelay: time.ms(endDelay),\n        easing: !isEasingList(easing) ? convertEasing(easing) : undefined,\n        direction: direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation = element.animate((_element$animate = {}, _defineProperty(_element$animate, name, keyframes), _defineProperty(_element$animate, \"offset\", offset), _defineProperty(_element$animate, \"easing\", isEasingList(easing) ? easing.map(convertEasing) : undefined), _element$animate), animationOptions);\n      /**\r\n       * Polyfill finished Promise in browsers that don't support it\r\n       */\n\n      if (!animation.finished) {\n        animation.finished = new Promise(function (resolve, reject) {\n          animation.onfinish = resolve;\n          animation.oncancel = reject;\n        });\n      }\n\n      var target = keyframes[keyframes.length - 1];\n      animation.finished.then(function () {\n        // Apply styles to target\n        style.set(element, name, target); // Ensure fill modes don't persist\n\n        animation.cancel();\n      }).catch(noop);\n      /**\r\n       * This forces Webkit to run animations on the main thread by exploiting\r\n       * this condition:\r\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\r\n       *\r\n       * This fixes Webkit's timing bugs, like accelerated animations falling\r\n       * out of sync with main thread animations and massive delays in starting\r\n       * accelerated animations in WKWebView.\r\n       */\n\n      if (!allowWebkitAcceleration) animation.playbackRate = 1.000001;\n      /**\r\n       * If we can't animate the value natively then we can fallback to the numbers-only\r\n       * polyfill for transforms.\r\n       */\n    } else if (valueIsTransform) {\n      /**\r\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\r\n       * it into a number before passing to the Animation polyfill.\r\n       */\n      keyframes = keyframes.map(function (value) {\n        return typeof value === \"string\" ? parseFloat(value) : value;\n      });\n      /**\r\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\r\n       * the current value from the DOM.\r\n       */\n\n      if (keyframes.length === 1) {\n        keyframes.unshift(parseFloat(readInitialValue()));\n      }\n\n      var render = function render(latest) {\n        if (definition) latest = definition.toDefaultUnit(latest);\n        style.set(element, name, latest);\n      };\n\n      animation = new Animation(render, keyframes, Object.assign(Object.assign({}, options), {\n        duration: duration,\n        easing: easing\n      }));\n    } else {\n      var _target = keyframes[keyframes.length - 1];\n      style.set(element, name, definition && isNumber(_target) ? definition.toDefaultUnit(_target) : _target);\n    }\n\n    if (isRecording) {\n      record(element, key, keyframes, {\n        duration: duration,\n        delay: delay,\n        easing: easing,\n        repeat: repeat,\n        offset: offset\n      }, \"motion-one\");\n    }\n\n    motionValue.setAnimation(animation);\n    return animation;\n  };\n}\n\nexport { animateStyle };","map":{"version":3,"sources":["C:/Users/om/OneDrive/Desktop/My_PortFolio/node_modules/@motionone/dom/dist/animate/animate-style.es.js"],"names":["getAnimationData","getMotionValue","isCssVar","registerCssVariable","Animation","defaults","isEasingGenerator","isNumber","time","isEasingList","noop","isTransform","addTransformToElement","transformDefinitions","convertEasing","supports","hydrateKeyframes","keyframesList","style","getStyleName","stopAnimation","getDevToolsRecord","window","__MOTION_DEV_TOOLS_RECORD","animateStyle","element","key","keyframesDefinition","options","record","isRecording","animation","duration","delay","endDelay","repeat","easing","direction","offset","allowWebkitAcceleration","data","canAnimateNatively","waapi","valueIsTransform","name","motionValue","values","definition","get","generator","readInitialValue","_a","_b","initialValue","keyframes","custom","createAnimation","undefined","cssRegisterProperty","map","value","toDefaultUnit","length","partialKeyframes","unshift","animationOptions","ms","iterations","fill","animate","finished","Promise","resolve","reject","onfinish","oncancel","target","then","set","cancel","catch","playbackRate","parseFloat","render","latest","Object","assign","setAnimation"],"mappings":"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","sourcesContent":["import { getAnimationData, getMotionValue } from './data.es.js';\r\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\r\nimport { Animation } from '@motionone/animation';\r\nimport { defaults, isEasingGenerator, isNumber, time, isEasingList, noop } from '@motionone/utils';\r\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\r\nimport { convertEasing } from './utils/easing.es.js';\r\nimport { supports } from './utils/feature-detection.es.js';\r\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\r\nimport { style } from './style.es.js';\r\nimport { getStyleName } from './utils/get-style-name.es.js';\r\nimport { stopAnimation } from './utils/stop-animation.es.js';\r\n\r\nfunction getDevToolsRecord() {\r\n    return window.__MOTION_DEV_TOOLS_RECORD;\r\n}\r\nfunction animateStyle(element, key, keyframesDefinition, options = {}) {\r\n    const record = getDevToolsRecord();\r\n    const isRecording = options.record !== false && record;\r\n    let animation;\r\n    let { duration = defaults.duration, delay = defaults.delay, endDelay = defaults.endDelay, repeat = defaults.repeat, easing = defaults.easing, direction, offset, allowWebkitAcceleration = false, } = options;\r\n    const data = getAnimationData(element);\r\n    let canAnimateNatively = supports.waapi();\r\n    const valueIsTransform = isTransform(key);\r\n    /**\r\n     * If this is an individual transform, we need to map its\r\n     * key to a CSS variable and update the element's transform style\r\n     */\r\n    valueIsTransform && addTransformToElement(element, key);\r\n    const name = getStyleName(key);\r\n    const motionValue = getMotionValue(data.values, name);\r\n    /**\r\n     * Get definition of value, this will be used to convert numerical\r\n     * keyframes into the default value type.\r\n     */\r\n    const definition = transformDefinitions.get(name);\r\n    /**\r\n     * Stop the current animation, if any. Because this will trigger\r\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\r\n     * this is fired now and we return a factory function to create\r\n     * the actual animation that can get called in batch,\r\n     */\r\n    stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) &&\r\n        options.record !== false);\r\n    /**\r\n     * Batchable factory function containing all DOM reads.\r\n     */\r\n    return () => {\r\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\r\n        /**\r\n         * Replace null values with the previous keyframe value, or read\r\n         * it from the DOM if it's the first keyframe.\r\n         */\r\n        let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\r\n        if (isEasingGenerator(easing)) {\r\n            const custom = easing.createAnimation(keyframes, readInitialValue, valueIsTransform, name, motionValue);\r\n            easing = custom.easing;\r\n            if (custom.keyframes !== undefined)\r\n                keyframes = custom.keyframes;\r\n            if (custom.duration !== undefined)\r\n                duration = custom.duration;\r\n        }\r\n        /**\r\n         * If this is a CSS variable we need to register it with the browser\r\n         * before it can be animated natively. We also set it with setProperty\r\n         * rather than directly onto the element.style object.\r\n         */\r\n        if (isCssVar(name)) {\r\n            if (supports.cssRegisterProperty()) {\r\n                registerCssVariable(name);\r\n            }\r\n            else {\r\n                canAnimateNatively = false;\r\n            }\r\n        }\r\n        /**\r\n         * If we can animate this value with WAAPI, do so. Currently this only\r\n         * feature detects CSS.registerProperty but could check WAAPI too.\r\n         */\r\n        if (canAnimateNatively) {\r\n            /**\r\n             * Convert numbers to default value types. Currently this only supports\r\n             * transforms but it could also support other value types.\r\n             */\r\n            if (definition) {\r\n                keyframes = keyframes.map((value) => isNumber(value) ? definition.toDefaultUnit(value) : value);\r\n            }\r\n            /**\r\n             * If this browser doesn't support partial/implicit keyframes we need to\r\n             * explicitly provide one.\r\n             */\r\n            if (keyframes.length === 1 &&\r\n                (!supports.partialKeyframes() || isRecording)) {\r\n                keyframes.unshift(readInitialValue());\r\n            }\r\n            const animationOptions = {\r\n                delay: time.ms(delay),\r\n                duration: time.ms(duration),\r\n                endDelay: time.ms(endDelay),\r\n                easing: !isEasingList(easing) ? convertEasing(easing) : undefined,\r\n                direction,\r\n                iterations: repeat + 1,\r\n                fill: \"both\",\r\n            };\r\n            animation = element.animate({\r\n                [name]: keyframes,\r\n                offset,\r\n                easing: isEasingList(easing) ? easing.map(convertEasing) : undefined,\r\n            }, animationOptions);\r\n            /**\r\n             * Polyfill finished Promise in browsers that don't support it\r\n             */\r\n            if (!animation.finished) {\r\n                animation.finished = new Promise((resolve, reject) => {\r\n                    animation.onfinish = resolve;\r\n                    animation.oncancel = reject;\r\n                });\r\n            }\r\n            const target = keyframes[keyframes.length - 1];\r\n            animation.finished\r\n                .then(() => {\r\n                // Apply styles to target\r\n                style.set(element, name, target);\r\n                // Ensure fill modes don't persist\r\n                animation.cancel();\r\n            })\r\n                .catch(noop);\r\n            /**\r\n             * This forces Webkit to run animations on the main thread by exploiting\r\n             * this condition:\r\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\r\n             *\r\n             * This fixes Webkit's timing bugs, like accelerated animations falling\r\n             * out of sync with main thread animations and massive delays in starting\r\n             * accelerated animations in WKWebView.\r\n             */\r\n            if (!allowWebkitAcceleration)\r\n                animation.playbackRate = 1.000001;\r\n            /**\r\n             * If we can't animate the value natively then we can fallback to the numbers-only\r\n             * polyfill for transforms.\r\n             */\r\n        }\r\n        else if (valueIsTransform) {\r\n            /**\r\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\r\n             * it into a number before passing to the Animation polyfill.\r\n             */\r\n            keyframes = keyframes.map((value) => typeof value === \"string\" ? parseFloat(value) : value);\r\n            /**\r\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\r\n             * the current value from the DOM.\r\n             */\r\n            if (keyframes.length === 1) {\r\n                keyframes.unshift(parseFloat(readInitialValue()));\r\n            }\r\n            const render = (latest) => {\r\n                if (definition)\r\n                    latest = definition.toDefaultUnit(latest);\r\n                style.set(element, name, latest);\r\n            };\r\n            animation = new Animation(render, keyframes, Object.assign(Object.assign({}, options), { duration,\r\n                easing }));\r\n        }\r\n        else {\r\n            const target = keyframes[keyframes.length - 1];\r\n            style.set(element, name, definition && isNumber(target)\r\n                ? definition.toDefaultUnit(target)\r\n                : target);\r\n        }\r\n        if (isRecording) {\r\n            record(element, key, keyframes, {\r\n                duration,\r\n                delay: delay,\r\n                easing,\r\n                repeat,\r\n                offset,\r\n            }, \"motion-one\");\r\n        }\r\n        motionValue.setAnimation(animation);\r\n        return animation;\r\n    };\r\n}\r\n\r\nexport { animateStyle };\r\n"]},"metadata":{},"sourceType":"module"}